import pandas as pd
from datetime import datetime
import re
from tkinter import Tk
from tkinter.filedialog import askopenfilename
from spellchecker import SpellChecker
from unidecode import unidecode
from difflib import get_close_matches
from rapidfuzz import fuzz, process
import unicodedata

import win32com.client as win32

# Configurar diccionario en espa√±ol
spell = SpellChecker(language="es")

# ==========================
# Selecci√≥n archivo CSV
# ==========================

Tk().withdraw()
ruta = askopenfilename(
    filetypes=[("Archivos CSV", "*.csv")],
    title="Seleccione el archivo CSV"
)

if not ruta:
    print("‚ùå No se seleccion√≥ ning√∫n archivo. Saliendo...")
    raise SystemExit

# ==========================
# Columnas a analizar
# ==========================
columnas_objetivo = [
    "ID",
    "Nombre Proyecto",
    "Fecha Captura",
    "C√≥digo Interno",
    "S√≠mbolo",
    "Nombre Predio Jur√≠dico",
    "Escala",
    "Fuente Informaci√≥n",
    "Creado Por",
    "Fecha √öltima Actualizaci√≥n",
    "Modificado Por",
    "Comentarios",
    "C√≥d DANE Depto",
    "C√≥d DANE Mpio",
    "A√±o Vigencia Insumo Geogr√°fico",
    "Nombre Vereda",
    "RULEID",
    "C√≥digo SIG Predio Jur√≠dico",
    "√Årea Terreno Calculada Mts2",
    "Tipo de Propiedad"
]

# ==========================
# Formatos de fecha v√°lidos
# ==========================
DATE_FORMATS = [
    "%Y-%m-%d",   # 2015-09-22
    "%d/%m/%Y",   # 22/09/2015
]

def parse_date_strict(s):
    """Devuelve datetime si coincide con un formato v√°lido.
       Si contiene hora ‚Üí 'HORA_ENCONTRADA'.
       Si no coincide ‚Üí 'FORMATO_INVALIDO'.
    """
    if pd.isna(s):
        return pd.NaT
    s_clean = str(s).strip()
    if s_clean == "":
        return pd.NaT

    # üö® detectar si incluye hora
    if re.search(r"\d+:\d+", s_clean) or re.search(r"\b(AM|PM|am|pm)\b", s_clean):
        return "HORA_ENCONTRADA"

    # Intentar parsear con los formatos permitidos
    for fmt in DATE_FORMATS:
        try:
            return datetime.strptime(s_clean, fmt)
        except ValueError:
            continue

    # ‚ùå Ning√∫n formato v√°lido
    return "FORMATO_INVALIDO"

# ==========================
# Cargar CSV: todo como texto
# ==========================

df_raw = pd.read_csv(
    ruta,
    usecols=columnas_objetivo,
    encoding="utf-8",
    sep=";",
    dtype=str
)

# Copia para an√°lisis
df = df_raw.copy()

# Normalizar: convertir espacios vac√≠os en <ESPACIO>
def limpiar_valor(x):
    if isinstance(x, str):
        if x.strip() == "" and x != "":
            return "<ESPACIO>"
        return x.strip()
    return x

df = df.applymap(limpiar_valor)
df = df.replace("", pd.NA)  # opcional: reemplazar strings vac√≠os por NaN

# Preprocesamientio de Columnas Fecha Captura y A√±o Vigencia.
def extraer_anio(texto):
    if pd.isna(texto):
        return None
    match = re.search(r"\d{4}", str(texto))
    return int(match.group()) if match else None

# Crear columnas adicionales en todo el DataFrame
df_raw["Anio_Captura"] = df_raw["Fecha Captura"].apply(extraer_anio)
df_raw["Anio_Vigencia_Num"] = df_raw["A√±o Vigencia Insumo Geogr√°fico"].apply(extraer_anio)

registros = []

codigos_dane_deptos = {
    "05": "Antioquia",
    "08": "Atl√°ntico",
    "11": "Bogot√°, D.C.",
    "13": "Bol√≠var",
    "15": "Boyac√°",
    "17": "Caldas",
    "18": "Caquet√°",
    "19": "Cauca",
    "20": "Cesar",
    "23": "C√≥rdoba",
    "25": "Cundinamarca",
    "27": "Choc√≥",
    "41": "Huila",
    "44": "La Guajira",
    "47": "Magdalena",
    "50": "Meta",
    "52": "Nari√±o",
    "54": "Norte de Santander",
    "63": "Quind√≠o",
    "66": "Risaralda",
    "68": "Santander",
    "70": "Sucre",
    "73": "Tolima",
    "76": "Valle del Cauca",
    "81": "Arauca",
    "85": "Casanare",
    "86": "Putumayo",
    "88": "Archipi√©lago de San Andr√©s, Providencia y Santa Catalina",
    "91": "Amazonas",
    "94": "Guain√≠a",
    "95": "Guaviare",
    "97": "Vaup√©s",
    "99": "Vichada"
}
# ==========================
# Construir reporte por columna
# ==========================

# üîπ Validaciones columna por columna:
for idx, fila in df.iterrows():
    id_val = fila["ID"]

    # ---- Nombre Proyecto ----

    val_raw = df_raw.loc[idx, "Nombre Proyecto"]
    val = fila["Nombre Proyecto"]

    obs_nom_proyect = []  # üëâ aqu√≠ guardamos observaciones espec√≠ficas de Nombre Proyecto

    if pd.isna(val_raw) or str(val_raw).strip() == "":  # üö® Vac√≠o real
        obs = {
            "ID": id_val,
            "Columna Analizada": "Nombre Proyecto",
            "Dato Analizado": "",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato sin diligenciar",
            "Tipolog√≠a": "Fondo"
        }
        registros.append(obs)
        obs_nom_proyect.append(obs)

    elif val_raw == "<ESPACIO>":  # solo espacios
        obs = {
            "ID": id_val,
            "Columna Analizada": "Nombre Proyecto",
            "Dato Analizado": " ",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato diligenciado √∫nicamente con espacio, Dato no es coherente con el Nombre Proyecto",
            "Tipolog√≠a": "Forma"
        }
        registros.append(obs)
        obs_nom_proyect.append(obs)

    elif isinstance(val_raw, str):
        observaciones = []

        # üö® Validaci√≥n de espacios problem√°ticos
        if val_raw.startswith(" "):
            observaciones.append("Espacio al inicio")
        if val_raw.endswith(" "):
            observaciones.append("Espacio al final")
        if "  " in val_raw:
            observaciones.append("M√∫ltiples espacios")
        if "\n" in val_raw or "\r" in val_raw:
            observaciones.append("Saltos de l√≠nea")

        # üö® Validaci√≥n de estructura (alfanum√©rico + guion bajo, incluyendo acentos y √±/√º)
        if not re.match(r"^[A-Za-z0-9_√Å√â√ç√ì√ö√ú√ë√°√©√≠√≥√∫√º√±]+$", val_raw):
            observaciones.append("Estructura no cumple con el Diccionario de Datos")
        else:
            partes = val_raw.split("_")

            if len(partes) != 2:
                observaciones.append("Estructura no cumple con el Diccionario de Datos")
            else:
                negocio, proyecto = partes
                siglas_negocio = ["SIS", "VEX", "VAS", "VRC", "VRS", "VRO", "OXY", "VFS", "VPI"]
                if negocio not in siglas_negocio:
                    observaciones.append("La sigla del Negocio no se encuentra de acuerdo con el Diccionario de Datos")

        # üö® Si hubo observaciones, se registran todas juntas
        if observaciones:
            obs = {
                "ID": id_val,
                "Columna Analizada": "Nombre Proyecto",
                "Dato Analizado": val_raw,
                "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                "Observaci√≥n Espec√≠fica": "; ".join(observaciones),
                "Tipolog√≠a": "Forma"
            }
            registros.append(obs)
            obs_nom_proyect.append(obs)
    # Guardar las observaciones de Nombre Proyecto en el registro
    fila["Obs_Nom_Proyect"] = "; ".join(o["Observaci√≥n Espec√≠fica"] for o in obs_nom_proyect) if obs_nom_proyect else ""

    # ---- Fecha Captura ----
    
    fecha_revision = datetime.today()  # üëà se usa la fecha actual

    val_raw = df_raw.loc[idx, "Fecha Captura"]   # texto original
    parsed = parse_date_strict(val_raw)

    if pd.isna(parsed):  # vac√≠o real
        registros.append({
            "ID": id_val,
            "Columna Analizada": "Fecha Captura",
            "Dato Analizado": "",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato sin diligenciar",
            "Tipolog√≠a": "Forma"
            })

    elif parsed == "HORA_ENCONTRADA":
        registros.append({
            "ID": id_val,
            "Columna Analizada": "Fecha Captura",
            "Dato Analizado": str(val_raw),
            "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
            "Observaci√≥n Espec√≠fica": "La fecha incluye hora (solo deber√≠a tener fecha)",
            "Tipolog√≠a": "Forma"
        })

    elif parsed == "FORMATO_INVALIDO":
        registros.append({
            "ID": id_val,
            "Columna Analizada": "Fecha Captura",
            "Dato Analizado": str(val_raw),
            "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
            "Observaci√≥n Espec√≠fica": "La fecha no corresponde al est√°ndar esperado",
            "Tipolog√≠a": "Forma"
        })

    elif val_raw == "<ESPACIO>":
        registros.append({
            "ID": id_val,
            "Columna Analizada": "Fecha Captura",
            "Dato Analizado": " ",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato diligenciado √∫nicamente con espacio",
            "Tipolog√≠a": "Forma"
        })

    elif isinstance(parsed, datetime):
    # üö® Reglas de negocio espec√≠ficas
        if parsed.strftime("%Y-%m-%d") in ["1900-01-01", "1900-12-12"]:
            registros.append({
                "ID": id_val,
                "Columna Analizada": "Fecha Captura",
                "Dato Analizado": str(val_raw),
                "Observaci√≥n General": "Inconsistencia L√≥gica del Dato",
                "Observaci√≥n Espec√≠fica": "Fecha Captura no v√°lida para No Aplica y Sin Informaci√≥n",
                "Tipolog√≠a": "Forma"
            })
        elif parsed < datetime(2009, 1, 1) or parsed > fecha_revision:
            registros.append({
                "ID": id_val,
                "Columna Analizada": "Fecha Captura",
                "Dato Analizado": str(val_raw),
                "Observaci√≥n General": "Inconsistencia L√≥gica del Dato",
                "Observaci√≥n Espec√≠fica": "Fechas no son consistentes de acuerdo a los Periodos de captura",
                "Tipolog√≠a": "Forma"
            })  

    elif isinstance(val_raw, str):  # üö® Validaci√≥n de espacios problem√°ticos
        errores_espacios = []
        if val_raw.startswith(" "):
            errores_espacios.append("Espacio al inicio")
        if val_raw.endswith(" "):
            errores_espacios.append("Espacio al final")
        if "  " in val_raw:
            errores_espacios.append("M√∫ltiples espacios")
        if "\n" in val_raw or "\r" in val_raw:
            errores_espacios.append("Saltos de l√≠nea")
    
        if errores_espacios:
            registros.append({
                "ID": id_val,
                "Columna Analizada": "Fecha Captura",
                "Dato Analizado": val_raw,
                "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                "Observaci√≥n Espec√≠fica": "; ".join(errores_espacios),
                "Tipolog√≠a": "Forma"
        }) 

    # ---- C√≥digo Interno ----
    val_raw = df_raw.loc[idx, "C√≥digo Interno"]   # dato original sin modificar
    val = fila["C√≥digo Interno"]

    # Traer el Nombre Proyecto asociado
    nombre_proyecto_ref = df_raw.loc[idx, "Nombre Proyecto"]

    # üö® Caso 1: Vac√≠os / Totalidad ‚Üí prioridad absoluta
    if pd.isna(val):
        registros.append({
            "ID": id_val,
            "Columna Analizada": "C√≥digo Interno",
            "Dato Analizado": "",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato sin diligenciar",
            "Tipolog√≠a": "Forma"
        })

    elif val == "<ESPACIO>":
        registros.append({
            "ID": id_val,
            "Columna Analizada": "C√≥digo Interno",
            "Dato Analizado": " ",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato diligenciado √∫nicamente con espacio, Dato no es coherente con el C√≥digo Interno",
            "Tipolog√≠a": "Forma"
        })

    # üö® Caso 2: Tiene valor ‚Üí se acumulan validaciones
    else:
        errores_forma = set()   # usar set evita duplicados
        es_duplicado = False    # bandera para l√≥gica

        # --- Validaci√≥n de espacios indebidos
        if isinstance(val_raw, str):
            if val_raw.startswith(" "): errores_forma.add("Espacio al inicio")
            if val_raw.endswith(" "): errores_forma.add("Espacio al final")
            if "  " in val_raw: errores_forma.add("M√∫ltiples espacios")
            if "\n" in val_raw or "\r" in val_raw: errores_forma.add("Saltos de l√≠nea")

        # --- Validaci√≥n de duplicidad
        if (df_raw["C√≥digo Interno"] == val_raw).sum() > 1:
            es_duplicado = True
            errores_forma.add("C√≥digo Interno duplicado")

        # --- Validaci√≥n de estructura: SIGLA_PROYECTO_PJXX
        partes = val_raw.split("_")
        if len(partes) != 3:
            errores_forma.add("C√≥digo Interno no conserva la estructura definida en el Diccionario de Datos")
        else:
            sigla, proyecto, pj_consec = partes

            # Validaci√≥n sigla
            siglas_validas = ["SIS", "VEX", "VAS", "VRC", "VRS", "VRO", "OXY", "VFS", "VPI"]
            if sigla not in siglas_validas:
                errores_forma.add("C√≥digo Interno no conserva la estructura definida en el Diccionario de Datos")

            # Validaci√≥n segunda parte (Proyecto)
            if "_" in proyecto or "-" in proyecto or " " in proyecto:
                errores_forma.add("C√≥digo Interno no conserva la estructura definida en el Diccionario de Datos")
            elif any(ch.isdigit() for ch in proyecto):
                errores_forma.add("C√≥digo Interno no conserva la estructura definida en el Diccionario de Datos")
            elif not re.match(r"^[A-Za-z√Å√â√ç√ì√ö√ú√ë√°√©√≠√≥√∫√º√±]+$", proyecto):
                errores_forma.add("C√≥digo Interno no conserva la estructura definida en el Diccionario de Datos")

            # Validaci√≥n PJ + consecutivo
            if not pj_consec.startswith("PJ"):
                errores_forma.add("C√≥digo Interno no conserva la estructura definida en el Diccionario de Datos")
            else:
                consecutivo = pj_consec.replace("PJ", "")
                if not consecutivo.isdigit():
                    errores_forma.add("C√≥digo Interno no conserva la estructura definida en el Diccionario de Datos")
                else:
                    if len(consecutivo) not in [2, 3]:
                        errores_forma.add("C√≥digo Interno no conserva la estructura definida en el Diccionario de Datos")
                    if consecutivo == "00":
                        errores_forma.add("C√≥digo Interno no conserva la estructura definida en el Diccionario de Datos")

        # --- Validar que Nombre Proyecto est√© contenido en C√≥digo Interno
        if isinstance(nombre_proyecto_ref, str) and nombre_proyecto_ref.strip():
            if nombre_proyecto_ref not in val_raw:
                errores_forma.add("Nombre Proyecto no est√° contenido en C√≥digo Interno")

        # --- Consolidar la observaci√≥n final
        if errores_forma:
            registros.append({
                "ID": id_val,
                "Columna Analizada": "C√≥digo Interno",
                "Dato Analizado": val_raw,
                "Observaci√≥n General": "Inconsistencia L√≥gica del Dato" if es_duplicado else "El Dato no guarda el est√°ndar del Diccionario de Datos",
                "Observaci√≥n Espec√≠fica": "; ".join(sorted(errores_forma)),
                "Tipolog√≠a": "Fondo" if es_duplicado else "Forma"
            })


    # ---- S√≠mbolo ----

    val_raw = df_raw.loc[idx, "S√≠mbolo"]
    val = fila["S√≠mbolo"]
    
    if pd.isna(val) or str(val_raw).strip() == "": # Vacio
        registros.append({
            "ID": id_val,
            "Columna Analizada": "S√≠mbolo",
            "Dato Analizado": "",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato sin diligenciar",
            "Tipolog√≠a": "Forma"
        })

    elif val == "<ESPACIO>":  # solo espacios
        registros.append({
            "ID": id_val,
            "Columna Analizada": "S√≠mbolo",
            "Dato Analizado": " ",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato diligenciado √∫nicamente con espacio, Dato no es coherente con el S√≠mbolo",
            "Tipolog√≠a": "Forma"
        })

    elif isinstance(val_raw, str):  # üö® Validaci√≥n de espacios problem√°ticos
        errores = []
        val_clean = val_raw.strip()

        if val_raw.startswith(" "):
            errores.append("Espacio al inicio")
        if val_raw.endswith(" "):
            errores.append("Espacio al final")
        if "  " in val_raw:
            errores.append("M√∫ltiples espacios")
        if "\n" in val_raw or "\r" in val_raw:
            errores.append("Saltos de l√≠nea")

     # üö® Validaci√≥n "No Aplica"

        if val_clean == "No Aplica":
            pass  # ‚úÖ v√°lido, no genera inconsistencia

        elif val_clean.lower() == "no aplica":
            errores.append("Estandarizar con formato tipo t√≠tulo")

        else:
            errores.append("Diligenciar No Aplica")    
    
        if errores:
            registros.append({
                "ID": id_val,
                "Columna Analizada": "S√≠mbolo",
                "Dato Analizado": val_raw,
                "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                "Observaci√≥n Espec√≠fica": "; ".join(errores),
                "Tipolog√≠a": "Forma"
        }) 
                  
    # ---- Nombre Predio Jur√≠dico ----

    val_raw = df_raw.loc[idx, "Nombre Predio Jur√≠dico"]
    val = fila["Nombre Predio Jur√≠dico"]

    if pd.isna(val):  # üö® Vac√≠o
        registros.append({
            "ID": id_val,
            "Columna Analizada": "Nombre Predio Jur√≠dico",
            "Dato Analizado": "",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato sin diligenciar",
            "Tipolog√≠a": "Forma"
        })

    elif val == "<ESPACIO>":  # üö® Solo espacios
        registros.append({
            "ID": id_val,
            "Columna Analizada": "Nombre Predio Jur√≠dico",
            "Dato Analizado": " ",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato diligenciado √∫nicamente con espacio, Dato no es coherente con el Nombre Predio Jur√≠dico",
            "Tipolog√≠a": "Forma"
        })

    elif isinstance(val_raw, str):
        errores = []
        val_clean = val_raw.strip()

        # üö® Saltos de l√≠nea / tabulaciones
        if "\n" in val_raw or "\r" in val_raw or "\t" in val_raw:
            errores.append("Saltos de l√≠nea o tabulaci√≥n")

        # üö® Espacios problem√°ticos ‚Üí ahora S√ç generan inconsistencia
        if val_raw.startswith(" "):
            errores.append("Espacio al inicio")
        if val_raw.endswith(" "):
            errores.append("Espacio al final")
        if "  " in val_raw:
            errores.append("M√∫ltiples espacios")

        # --- Normalizaci√≥n para tokens ---
        val_norm = re.sub(r'^[\s\-\.,;:]+', '', val_clean)  # quitar puntuaci√≥n inicial
        val_norm = re.sub(r'[;,:\.\-]+$', '', val_norm)     # quitar puntuaci√≥n final
        val_norm = re.sub(r'\s+', ' ', val_norm).strip()

        tokens = [t.strip(" ,.") for t in val_norm.split(" ") if t.strip() != ""]

        # --- Patrones y listas permitidas ---
        allowed_lower = {
            "de","del","la","las","los","el","y","o","por","en","sin","predio","urbano",
            "v√≠a","via","al","san","santa","corregimiento","vereda","sector","urbanizaci√≥n",
            "urbanizacion","barrio"
        }
        roman_pattern = re.compile(r'^(?:I|II|III|IV|V|VI|VII|VIII|IX|X)$', re.IGNORECASE)
        title_pattern = re.compile(r'^[A-Z√Å√â√ç√ì√ö√ë√ú][a-z√°√©√≠√≥√∫√±√º]+(?:-[A-Z√Å√â√ç√ì√ö√ë√ú][a-z√°√©√≠√≥√∫√±√º]+)*$')
        num_pattern = re.compile(r'^\d+[A-Z]?$')   # 13, 13A, 04
        single_upper = re.compile(r'^[A-Z]$')     # B, H, etc.

        invalid_tokens = []
        for tok in tokens:
            low = tok.lower()
            if low in allowed_lower:
                continue
            if roman_pattern.match(tok):
                continue
            if num_pattern.match(tok):
                continue
            if single_upper.match(tok):
                continue
            if title_pattern.match(tok):
                continue
            invalid_tokens.append(tok)

        # --- Resultado ---
        if errores or invalid_tokens:
            detalles = []
            if errores:
                detalles.append("; ".join(errores))
            if invalid_tokens:
                detalles.append("Token(es) inv√°lido(s): " + ", ".join(invalid_tokens))
            registros.append({
                "ID": id_val,
                "Columna Analizada": "Nombre Predio Jur√≠dico",
                "Dato Analizado": val_raw,
                "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                "Observaci√≥n Espec√≠fica": "; ".join(detalles),
                "Tipolog√≠a": "Forma"
            })

    # ---- Escala ----

    val_raw = df_raw.loc[idx, "Escala"]
    val = fila["Escala"]

    if pd.isna(val):  # üö® Vac√≠o
        registros.append({
            "ID": id_val,
            "Columna Analizada": "Escala",
            "Dato Analizado": "",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato sin diligenciar",
            "Tipolog√≠a": "Forma"
        })

    elif val == "<ESPACIO>":  # üö® Solo espacios
        registros.append({
            "ID": id_val,
            "Columna Analizada": "Escala",
            "Dato Analizado": " ",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato diligenciado √∫nicamente con espacio, Dato no es coherente con el Escala",
            "Tipolog√≠a": "Forma"
        })

    else:
        val_clean = str(val_raw).strip()

        # üö® Caso exacto v√°lido
        if val_clean in {"10000", "25000"}:
            pass  # ‚úÖ v√°lido

        # üö® Caso 1:10000 o 1:25000 ‚Üí error de forma
        elif val_clean in {"1:10000", "1:25000"}:
            registros.append({
                "ID": id_val,
                "Columna Analizada": "Escala",
                "Dato Analizado": val_raw,
                "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                "Observaci√≥n Espec√≠fica": "Solo debe diligenciarse el N√∫mero de la Escala",
                "Tipolog√≠a": "Forma"
            })

        # üö® Otros casos que empiezan con 1: ‚Üí error de forma + aclaraci√≥n IGAC
        elif val_clean.startswith("1:"):
            registros.append({
                "ID": id_val,
                "Columna Analizada": "Escala",
                "Dato Analizado": val_raw,
                "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                "Observaci√≥n Espec√≠fica": "Solo debe diligenciarse el N√∫mero de la Escala, Escala IGAC para predios rurales produce cartograf√≠a de 10000 y 25000",
                "Tipolog√≠a": "Forma"
            })

        # üö® Si es texto no num√©rico ‚Üí inconsistencia l√≥gica especial
        elif not val_clean.isdigit():
               registros.append({
                "ID": id_val,
                "Columna Analizada": "Escala",
                "Dato Analizado": val_raw,
                "Observaci√≥n General": "Inconsistencia L√≥gica del Dato",
                "Observaci√≥n Espec√≠fica": "Dato no corresponde al valor de una escala",
                "Tipolog√≠a": "Fondo"
            })

        # üö® Otros valores num√©ricos distintos a 10000/25000 ‚Üí inconsistencia l√≥gica
        else:
            registros.append({
                "ID": id_val,
                "Columna Analizada": "Escala",
                "Dato Analizado": val_raw,
                "Observaci√≥n General": "Inconsistencia L√≥gica del Dato",
                "Observaci√≥n Espec√≠fica": "Escala IGAC para predios rurales produce cartograf√≠a de 10000 y 25000",
                "Tipolog√≠a": "Fondo"
            })
                                    
    # ---- Fuente Informaci√≥n ----
    val_raw = df_raw.loc[idx, "Fuente Informaci√≥n"]
    val = fila["Fuente Informaci√≥n"]

    dominios_permitidos = [
        "VIT - Transporte",
        "ECP - Seguridad Fisica",
        "IGAC",
        "IDEAM",
        "Ministerio de Ambiente",
        "Otra Fuente",
        "ECP - Suministro y Mercadeo",
        "DANE",
        "ECP - Inmobiliario",
        "ECP - Social",
        "ECP - Ambiental",
        "Ministerio de Interior y Justicia",
        "VAS - Asociados",
        "Dise√±os Obra Civil",
        "ECP - Refinacion y Petroquimica",
        "Informacion de Campo",
        "VEX - Exploracion",
        "VPR - Produccion",
        "P8 - Gestion Documental",
        "Depuracion Poligonos SIGDI",
        "Levantamiento Topografico",
        "Trabajo Campo (GPS)",
        "Poligono Google Earth",
        "Poligono IGAC",
        "ECP - Dato Fundamental"
    ]

    dominios_restringidos_predios = [
        "Dise√±os Obra Civil",
        "ECP - Dato Fundamental",
        "Poligono Google Earth",
        "VEX - Exploracion",
        "VPR - Produccion"
    ]

    if pd.isna(val):  # üö® Vac√≠o
        registros.append({
            "ID": id_val,
            "Columna Analizada": "Fuente Informaci√≥n",
            "Dato Analizado": "",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato sin diligenciar",
            "Tipolog√≠a": "Forma"
        })

    elif isinstance(val_raw, str) and val_raw.strip() == "":  # üö® Solo espacios
        registros.append({
            "ID": id_val,
            "Columna Analizada": "Fuente Informaci√≥n",
            "Dato Analizado": val_raw,
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato diligenciado √∫nicamente con espacios",
            "Tipolog√≠a": "Forma"
        })

    elif isinstance(val_raw, str):  # üö® Validaci√≥n de espacios problem√°ticos
        errores_espacios = []
        if val_raw.startswith(" "):
            errores_espacios.append("Espacio al inicio")
        if val_raw.endswith(" "):
            errores_espacios.append("Espacio al final")
        if "  " in val_raw:
            errores_espacios.append("M√∫ltiples espacios")
        if "\n" in val_raw or "\r" in val_raw:
            errores_espacios.append("Saltos de l√≠nea")

        if errores_espacios:
            registros.append({
                "ID": id_val,
                "Columna Analizada": "Fuente Informaci√≥n",
                "Dato Analizado": val_raw,
                "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                "Observaci√≥n Espec√≠fica": "; ".join(errores_espacios),
                "Tipolog√≠a": "Forma"
            })

        # üö® Validaci√≥n de dominios permitidos
        if val_raw.strip() not in dominios_permitidos:
            registros.append({
                "ID": id_val,
                "Columna Analizada": "Fuente Informaci√≥n",
                "Dato Analizado": val_raw,
                "Observaci√≥n General": "El Dato no guarda el estandar del Diccionario de Datos",
                "Observaci√≥n Espec√≠fica": "Valores no se encuentran en los dominios del diccionario de datos",
                "Tipolog√≠a": "Forma"
            })

        # üö® Validaci√≥n de dominios restringidos para predios
        if val_raw.strip() in dominios_restringidos_predios:
            registros.append({
                "ID": id_val,
                "Columna Analizada": "Fuente Informaci√≥n",
                "Dato Analizado": val_raw,
                "Observaci√≥n General": "Inconsistencia Logica del Dato",
                "Observaci√≥n Espec√≠fica": "Dominio no es v√°lido para captura de predios",
                "Tipolog√≠a": "Fondo"
            })
                                                 
    # ---- Creado Por ----
    val_raw = df_raw.loc[idx, "Creado Por"]
    val = fila["Creado Por"]

    if pd.isna(val):  # Vac√≠o
        registros.append({
            "ID": id_val,
            "Columna Analizada": "Creado Por",
            "Dato Analizado": "",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato sin diligenciar",
            "Tipolog√≠a": "Forma"
        })

    elif val == "<ESPACIO>":  # solo espacios
        registros.append({
            "ID": id_val,
            "Columna Analizada": "Creado Por",
            "Dato Analizado": " ",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato diligenciado √∫nicamente con espacio, Dato no es coherente con el Creado Por",
            "Tipolog√≠a": "Forma"
        })

    elif isinstance(val_raw, str):

        # Normalizaci√≥n
        val_limpio = " ".join(val_raw.strip().split())
        val_lower = val_limpio.lower()

        # ------------------------------
        # üö® Casos especiales (registro aparte)
        # ------------------------------
        if (
            val_lower == "saneamiento p8 fase i"
            or val_lower == "levadata - saneamiento p8 fase i"
            or val_lower == "no aplica"
            or val_lower == "migracion lci"
            or val_lower in ["sin informacion", "sin informaci√≥n", "sin info"]
            or re.match(r"^c\d{6,}[a-zA-Z]?$", val_limpio.strip(), re.IGNORECASE)   # C√≥digos tipo C102627Q
            or re.match(r"^usuario con registro c\d{6,}[a-zA-Z]?$", val_limpio.strip(), re.IGNORECASE) # Usuario con registro C101848W
            or len(val_limpio.split()) == 1  # üëà solo una palabra
        ):
            registros.append({
                "ID": id_val,
                "Columna Analizada": "Creado Por",
                "Dato Analizado": val_raw,
                "Observaci√≥n General": "Inconsistencia Logica del Dato",
                "Observaci√≥n Espec√≠fica": "Capturar nombre completo, tener en cuenta que el dato entre el Property y EditPlot debe ser en creaci√≥n el mismo y debe estar en formato tipo t√≠tulo",
                "Tipolog√≠a": "Fondo"
            })

        # ------------------------------
        # üö® Otras validaciones (Formato, espacios, estandarizaci√≥n)
        # ------------------------------
        else:
            observaciones = []

            # Validaci√≥n Formato T√≠tulo (respetando tildes)
            if val_limpio != val_limpio.title():
                observaciones.append("Errores en Formato")

            # Detecci√≥n de variantes similares para estandarizaci√≥n
            val_normalizada = unidecode(val_limpio).title()
            nombres_existentes = df_raw["Creado Por"].dropna().unique()
            coincidencias = [n for n in nombres_existentes if unidecode(str(n)).title() == val_normalizada]

            if len(coincidencias) > 1:
                observaciones.append("Estandarizar Nombre a un solo registro")

            # Validaci√≥n de espacios
            if val_raw.startswith(" "):
                observaciones.append("Espacio al inicio")
            if val_raw.endswith(" "):
                observaciones.append("Espacio al final")
            if "  " in val_raw:
                observaciones.append("M√∫ltiples espacios")
            if "\n" in val_raw or "\r" in val_raw:
                observaciones.append("Saltos de l√≠nea")

            # Consolidar observaciones en un registro
            if observaciones:
                registros.append({
                    "ID": id_val,
                    "Columna Analizada": "Creado Por",
                    "Dato Analizado": val_raw,
                    "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                    "Observaci√≥n Espec√≠fica": "; ".join(observaciones),
                    "Tipolog√≠a": "Forma"
                })

    # ---- Fecha √öltima Actualizaci√≥n ----
     
    from datetime import datetime
    fecha_revision = datetime.today()  # üëà se usa la fecha actual

    val_raw = df_raw.loc[idx, "Fecha √öltima Actualizaci√≥n"]   # texto original
    parsed = parse_date_strict(val_raw)

    if pd.isna(parsed):  # vac√≠o real
        registros.append({
            "ID": id_val,
            "Columna Analizada": "Fecha √öltima Actualizaci√≥n",
            "Dato Analizado": "",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato sin diligenciar",
            "Tipolog√≠a": "Forma"
            })

    elif parsed == "HORA_ENCONTRADA":
        registros.append({
            "ID": id_val,
            "Columna Analizada": "Fecha √öltima Actualizaci√≥n",
            "Dato Analizado": str(val_raw),
            "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
            "Observaci√≥n Espec√≠fica": "La fecha incluye hora (solo deber√≠a tener fecha)",
            "Tipolog√≠a": "Forma"
        })

    elif parsed == "FORMATO_INVALIDO":
        registros.append({
            "ID": id_val,
            "Columna Analizada": "Fecha √öltima Actualizaci√≥n",
            "Dato Analizado": str(val_raw),
            "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
            "Observaci√≥n Espec√≠fica": "La fecha no corresponde al est√°ndar esperado (solo %Y-%m-%d o %d/%m/%Y)",
            "Tipolog√≠a": "Forma"
        })

    elif val_raw == "<ESPACIO>":
        registros.append({
            "ID": id_val,
            "Columna Analizada": "Fecha √öltima Actualizaci√≥n",
            "Dato Analizado": " ",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato diligenciado √∫nicamente con espacio",
            "Tipolog√≠a": "Forma"
        })

    elif isinstance(parsed, datetime):
    # üö® Reglas de negocio espec√≠ficas
       
        fecha_str = parsed.strftime("%Y-%m-%d") 
        
        # Caso especial: 1900-01-01 ‚Üí v√°lido
        if fecha_str == "1900-01-01":
            pass  # No hacer nada, se considera v√°lido

        # Caso especial: 1900-12-12 ‚Üí inconsistencia, sugerir estandarizar
        elif fecha_str == "1900-12-12":
            registros.append({
            "ID": id_val,
            "Columna Analizada": "Fecha √öltima Actualizaci√≥n",
            "Dato Analizado": str(val_raw),
            "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
            "Observaci√≥n Espec√≠fica": "Estandarizar a 1900-01-01",
            "Tipolog√≠a": "Forma"
        })
        elif parsed < datetime(2009, 1, 1) or parsed > fecha_revision:
            registros.append({
            "ID": id_val,
            "Columna Analizada": "Fecha √öltima Actualizaci√≥n",
            "Dato Analizado": str(val_raw),
            "Observaci√≥n General": "Inconsistencia L√≥gica del Dato",
            "Observaci√≥n Espec√≠fica": "Fechas no son consistentes de acuerdo a los Periodos de captura",
            "Tipolog√≠a": "Forma"
        })
      
    elif isinstance(val_raw, str):  # üö® Validaci√≥n de espacios problem√°ticos
        errores_espacios = []
        if val_raw.startswith(" "):
            errores_espacios.append("Espacio al inicio")
        if val_raw.endswith(" "):
            errores_espacios.append("Espacio al final")
        if "  " in val_raw:
            errores_espacios.append("M√∫ltiples espacios")
        if "\n" in val_raw or "\r" in val_raw:
            errores_espacios.append("Saltos de l√≠nea")
    
        if errores_espacios:
            registros.append({
                "ID": id_val,
                "Columna Analizada": "Fecha √öltima Actualizaci√≥n",
                "Dato Analizado": val_raw,
                "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                "Observaci√≥n Espec√≠fica": "; ".join(errores_espacios),
                "Tipolog√≠a": "Forma"
        }) 
            
    # ---- Modificado Por ----
    val_raw = df_raw.loc[idx, "Modificado Por"]
    val = fila["Modificado Por"]

    if pd.isna(val):  # Vac√≠o
        registros.append({
            "ID": id_val,
            "Columna Analizada": "Modificado Por",
            "Dato Analizado": "",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato sin diligenciar",
            "Tipolog√≠a": "Forma"
        })

    elif val == "<ESPACIO>":  # solo espacios
        registros.append({
            "ID": id_val,
            "Columna Analizada": "Modificado Por",
            "Dato Analizado": " ",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato diligenciado √∫nicamente con espacio, Dato no es coherente con el Modificado Por",
            "Tipolog√≠a": "Forma"
        })

    elif isinstance(val_raw, str):

        # Normalizaci√≥n
        val_limpio = " ".join(val_raw.strip().split())

        # ------------------------------
        # ‚úÖ Excepci√≥n: permitido solo "No Aplica" (tipo t√≠tulo exacto)
        # ------------------------------
        if val_limpio == "No Aplica":
            pass  # Se acepta, no genera inconsistencia

        # ------------------------------
        # üö® Variantes incorrectas de "No Aplica"
        # ------------------------------
        elif val_limpio.lower() == "no aplica" and val_limpio != "No Aplica":
            registros.append({
                "ID": id_val,
                "Columna Analizada": "Modificado Por",
                "Dato Analizado": val_raw,
                "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                "Observaci√≥n Espec√≠fica": "Errores en Formato",
                "Tipolog√≠a": "Forma"
            })

        # ------------------------------
        # üö® Casos especiales (registro aparte)
        # ------------------------------
        elif (
            val_limpio.lower() == "saneamiento p8 fase i"
            or val_limpio.lower() == "levadata - saneamiento p8 fase i"
            or val_limpio.lower() == "migracion lci"
            or val_limpio.lower() in ["sin informacion", "sin informaci√≥n", "sin info"]
            or re.match(r"^c\d{6,}[a-zA-Z]?$", val_limpio.strip(), re.IGNORECASE)   # C√≥digos tipo C102627Q
            or re.match(r"^usuario con registro c\d{6,}[a-zA-Z]?$", val_limpio.strip(), re.IGNORECASE) # Usuario con registro C101848W
            or len(val_limpio.split()) == 1  # üëà solo una palabra
        ):
            registros.append({
                "ID": id_val,
                "Columna Analizada": "Modificado Por",
                "Dato Analizado": val_raw,
                "Observaci√≥n General": "Inconsistencia Logica del Dato",
                "Observaci√≥n Espec√≠fica": "Capturar nombre completo, tener en cuenta que el dato entre el Property y EditPlot debe ser en creaci√≥n el mismo y debe estar en formato tipo t√≠tulo",
                "Tipolog√≠a": "Fondo"
            })

        # ------------------------------
        # üö® Otras validaciones (Formato, espacios, estandarizaci√≥n)
        # ------------------------------
        else:
            observaciones = []

            if val_limpio != val_limpio.title():
                observaciones.append("Errores en Formato")

            val_normalizada = unidecode(val_limpio).title()
            nombres_existentes = df_raw["Modificado Por"].dropna().unique()
            coincidencias = [n for n in nombres_existentes if unidecode(str(n)).title() == val_normalizada]

            if len(coincidencias) > 1:
                observaciones.append("Estandarizar Nombre a un solo registro")

            if val_raw.startswith(" "):
                observaciones.append("Espacio al inicio")
            if val_raw.endswith(" "):
                observaciones.append("Espacio al final")
            if "  " in val_raw:
                observaciones.append("M√∫ltiples espacios")
            if "\n" in val_raw or "\r" in val_raw:
                observaciones.append("Saltos de l√≠nea")

            if observaciones:
                registros.append({
                    "ID": id_val,
                    "Columna Analizada": "Modificado Por",
                    "Dato Analizado": val_raw,
                    "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                    "Observaci√≥n Espec√≠fica": "; ".join(observaciones),
                    "Tipolog√≠a": "Forma"
                })

        # ---- Comentarios ----

    val_raw = df_raw.loc[idx, "Comentarios"]
    val = fila["Comentarios"]

    if pd.isna(val):  # Vac√≠o
        registros.append({
            "ID": id_val,
            "Columna Analizada": "Comentarios",
            "Dato Analizado": "",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato sin diligenciar",
            "Tipolog√≠a": "Forma"
        })

    elif val == "<ESPACIO>":  # solo espacios
        registros.append({
            "ID": id_val,
            "Columna Analizada": "Comentarios",
            "Dato Analizado": " ",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato diligenciado √∫nicamente con espacio, Dato no es coherente con Comentarios",
            "Tipolog√≠a": "Forma"
        })

    elif isinstance(val_raw, str):

        val_limpio = " ".join(val_raw.strip().split())
        val_lower = val_limpio.lower()
        observaciones = []
        formato_invalido = False

        # ------------------------------
        # üö® Casos especiales
        # ------------------------------

        # 1. "Sin Comentarios" exacto ‚Üí v√°lido
        if val_limpio == "Sin Comentarios":
            pass

        # 2. Variantes que deben estandarizarse a "Sin Comentarios"
        elif val_lower in [
            "no aplica", "n/a",
            "sin observacion", "sin observaci√≥n",
            "sin informacion", "sin informaci√≥n",
            "sin observaciones", "sin observaci√≥nes"
        ]:
            registros.append({
                "ID": id_val,
                "Columna Analizada": "Comentarios",
                "Dato Analizado": val_raw,
                "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                "Observaci√≥n Espec√≠fica": "Estandarizar a Sin Comentarios",
                "Tipolog√≠a": "Forma"
            })

        # 3. Solo s√≠mbolos, solo n√∫meros o una sola letra
        elif re.fullmatch(r"[\W_]+", val_limpio) or val_limpio.isdigit() or (len(val_limpio.split()) == 1 and len(val_limpio) == 1):
            registros.append({
                "ID": id_val,
                "Columna Analizada": "Comentarios",
                "Dato Analizado": val_raw,
                "Observaci√≥n General": "Inconsistencia Logica del Dato",
                "Observaci√≥n Espec√≠fica": "Comentario no es claro",
                "Tipolog√≠a": "Forma"
            })

        else:
            # ------------------------------
            # üö® Validaci√≥n de espacios y saltos de l√≠nea
            # ------------------------------
            if val_raw.startswith(" "):
                observaciones.append("Espacio al inicio")
            if val_raw.endswith(" "):
                observaciones.append("Espacio al final")
            if "  " in val_raw:
                observaciones.append("M√∫ltiples espacios")
            if "\n" in val_raw or "\r" in val_raw:
                observaciones.append("Saltos de l√≠nea")

            # ------------------------------
            # üö® Validaci√≥n formato tipo oraci√≥n con excepci√≥n de comillas
            # ------------------------------
            excepcion_comillas = False
            bloques = re.findall(r'"([^"]*)"', val_limpio)

            if bloques:
                excepcion_comillas = True
                for b in bloques:
                    if b == "" or b != b.title():  # vac√≠o o no est√° en formato t√≠tulo
                        excepcion_comillas = False
                        break

            if not excepcion_comillas:
                if val_limpio:
                    if not val_limpio[0].isupper():  # debe iniciar en may√∫scula
                        formato_invalido = True
                    if len(val_limpio) > 1 and val_limpio[1:].isupper():  # no todo may√∫sculas
                        formato_invalido = True
                    if not val_limpio[-1].isalnum():  # debe terminar en letra o n√∫mero
                        formato_invalido = True

            if formato_invalido:
                observaciones.append("Errores en Formato")

            # ------------------------------
            # üö® Consolidar observaciones
            # ------------------------------
            if observaciones:
                registros.append({
                    "ID": id_val,
                    "Columna Analizada": "Comentarios",
                    "Dato Analizado": val_raw,
                    "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                    "Observaci√≥n Espec√≠fica": "; ".join(observaciones),
                    "Tipolog√≠a": "Forma"
                })

        # üö® Validaci√≥n ortogr√°fica con Microsoft Word

    ''' word = win32.gencache.EnsureDispatch("Word.Application")
        word.Visible = False
        doc = word.Documents.Add()

        palabras = [p.strip(".,;:¬°!¬ø?()\"'") for p in val_raw.split()]
        mal_escritas = [p for p in palabras if p and not doc.CheckSpelling(p)]

        doc.Close(False)
        word.Quit()

        if mal_escritas:
            errores.append(f"Errores ortogr√°ficos detectados: {', '.join(mal_escritas)}")'''

    # ---- C√≥d DANE Depto ----

    val_raw = df_raw.loc[idx, "C√≥d DANE Depto"]
    val = fila["C√≥d DANE Depto"]

    observaciones = []  # <- acumulador de observaciones

    if pd.isna(val):  # üö® Vac√≠o
        observaciones.append({
            "ID": id_val,
            "Columna Analizada": "C√≥d DANE Depto",
            "Dato Analizado": "",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato sin diligenciar",
            "Tipolog√≠a": "Forma"
        })

    elif val == "<ESPACIO>":  # üö® solo espacios
        observaciones.append({
            "ID": id_val,
            "Columna Analizada": "C√≥d DANE Depto",
            "Dato Analizado": " ",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato diligenciado √∫nicamente con espacio, Dato no es coherente con el C√≥d DANE Depto",
            "Tipolog√≠a": "Forma"
        })

    else:
        if isinstance(val_raw, str):  # üö® Validaci√≥n de espacios problem√°ticos
            errores_espacios = []
            if val_raw.startswith(" "):
                errores_espacios.append("Espacio al inicio")
            if val_raw.endswith(" "):
                errores_espacios.append("Espacio al final")
            if "  " in val_raw:
                errores_espacios.append("M√∫ltiples espacios")
            if "\n" in val_raw or "\r" in val_raw:
                errores_espacios.append("Saltos de l√≠nea")

            if errores_espacios:
                observaciones.append({
                    "ID": id_val,
                    "Columna Analizada": "C√≥d DANE Depto",
                    "Dato Analizado": val_raw,
                    "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                    "Observaci√≥n Espec√≠fica": "; ".join(errores_espacios),
                    "Tipolog√≠a": "Forma"
                })

        # üö® Validaci√≥n de longitud (solo 2 d√≠gitos num√©ricos)
        try:
            val_str = str(val).strip()
            if not (val_str.isdigit() and len(val_str) == 2):
                observaciones.append({
                    "ID": id_val,
                    "Columna Analizada": "C√≥d DANE Depto",
                    "Dato Analizado": val_str,
                    "Observaci√≥n General": "Inconsistencia Logica del Dato",
                    "Observaci√≥n Espec√≠fica": "Digitar solo 2 d√≠gitos num√©ricos. Verificar con la fuente",
                    "Tipolog√≠a": "Fondo"
                })
            else:
                # üö® Validaci√≥n contra listado oficial de DANE
                if val_str not in codigos_dane_deptos:
                    observaciones.append({
                        "ID": id_val,
                        "Columna Analizada": "C√≥d DANE Depto",
                        "Dato Analizado": val_str,
                        "Observaci√≥n General": "Inconsistencia Logica del Dato",
                        "Observaci√≥n Espec√≠fica": "Dato no corresponde al c√≥digo DANE, Verificar con la fuente",
                        "Tipolog√≠a": "Fondo"
                    })
        except Exception:
            pass

    # üö® Agregar todas las observaciones encontradas
    if observaciones:
        registros.extend(observaciones)
                 
    # ---- C√≥d DANE Mpio ----

    val_raw = df_raw.loc[idx, "C√≥d DANE Mpio"]
    val = fila["C√≥d DANE Mpio"]

    observaciones = []  # <- acumulador

    if pd.isna(val):  # üö® Vac√≠o
        observaciones.append({
            "ID": id_val,
            "Columna Analizada": "C√≥d DANE Mpio",
            "Dato Analizado": "",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato sin diligenciar",
            "Tipolog√≠a": "Forma"
        })

    elif val == "<ESPACIO>":  # üö® solo espacios
        observaciones.append({
            "ID": id_val,
            "Columna Analizada": "C√≥d DANE Mpio",
            "Dato Analizado": " ",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato diligenciado √∫nicamente con espacio, Dato no es coherente con el C√≥d DANE Mpio",
            "Tipolog√≠a": "Forma"
        })

    else:
        if isinstance(val_raw, str):  # üö® Validaci√≥n de espacios problem√°ticos
            errores_espacios = []
            if val_raw.startswith(" "):
                errores_espacios.append("Espacio al inicio")
            if val_raw.endswith(" "):
                errores_espacios.append("Espacio al final")
            if "  " in val_raw:
                errores_espacios.append("M√∫ltiples espacios")
            if "\n" in val_raw or "\r" in val_raw:
                errores_espacios.append("Saltos de l√≠nea")

            if errores_espacios:
                observaciones.append({
                    "ID": id_val,
                    "Columna Analizada": "C√≥d DANE Mpio",
                    "Dato Analizado": val_raw,
                    "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                    "Observaci√≥n Espec√≠fica": "; ".join(errores_espacios),
                    "Tipolog√≠a": "Forma"
                })

        # üö® Validaci√≥n de longitud y contenido
        try:
            val_str = str(val).strip()

            # Caso: 3 d√≠gitos
            if val_str.isdigit() and len(val_str) == 3:
                pass  # v√°lido, no se reporta nada

            # Caso: 5 d√≠gitos
            elif val_str.isdigit() and len(val_str) == 5:
                depto = val_str[:2]  # primeros dos d√≠gitos
                if depto in codigos_dane_deptos:
                    observaciones.append({
                        "ID": id_val,
                        "Columna Analizada": "C√≥d DANE Mpio",
                        "Dato Analizado": val_str,
                        "Observaci√≥n General": "El Dato no guarda el estandar del Diccionario de Datos",
                        "Observaci√≥n Espec√≠fica": "Extraer y reemplazar los caracteres desde la posici√≥n 3 al 5 del dato C√≥d DANE Mpio",
                        "Tipolog√≠a": "Forma"
                    })
                else:
                    observaciones.append({
                        "ID": id_val,
                        "Columna Analizada": "C√≥d DANE Mpio",
                        "Dato Analizado": val_str,
                        "Observaci√≥n General": "Inconsistencia L√≥gica del Dato",
                        "Observaci√≥n Espec√≠fica": "Dato no guarda relaci√≥n con C√≥digo DANE, este debe contar con 3 d√≠gitos. Verificar Dato",
                        "Tipolog√≠a": "Fondo"
                    })

            # Caso: ni 3 ni 5 d√≠gitos, o caracteres no num√©ricos
            else:
                observaciones.append({
                    "ID": id_val,
                    "Columna Analizada": "C√≥d DANE Mpio",
                    "Dato Analizado": val_str,
                    "Observaci√≥n General": "Inconsistencia L√≥gica del Dato",
                    "Observaci√≥n Espec√≠fica": "Dato no guarda relaci√≥n con C√≥digo DANE, Verificar Dato",
                    "Tipolog√≠a": "Fondo"
                })

        except Exception:
            pass

    # üö® Agregar todas las observaciones
    if observaciones:
        registros.extend(observaciones)

    # ---- A√±o Vigencia Insumo Geogr√°fico ----
    val_raw = df_raw.loc[idx, "A√±o Vigencia Insumo Geogr√°fico"]
    val = fila["A√±o Vigencia Insumo Geogr√°fico"]

    anio_captura = df_raw.loc[idx, "Anio_Captura"]
    anio_vigencia = df_raw.loc[idx, "Anio_Vigencia_Num"]

    observaciones = []

    # 1. Totalidad (vac√≠o o NaN reales)
    if pd.isna(val) or str(val).strip() == "":
        observaciones.append({
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato sin diligenciar",
            "Tipolog√≠a": "Fondo"
        })

    else:
        val = str(val).strip()  # üëà solo convierto a string si no es NaN

        # 2. Sin Informaci√≥n o -9999
        if val.upper().replace("√ì", "O") in ["SIN INFORMACION", "SIN INFORMACI√ìN", "-9999", "1900"]:
            if val != "Sin Informaci√≥n":
                observaciones.append({
                    "Observaci√≥n General": "El Dato no guarda el estandar del Diccionario de Datos",
                    "Observaci√≥n Espec√≠fica": "Estandarizar a Sin Informaci√≥n",
                    "Tipolog√≠a": "Forma"
                })

        # 3. Estructura DD/MM/AAAA o variaciones D/M/AAAA
        elif re.fullmatch(r"\d{1,2}/\d{1,2}/\d{4}", val):
            observaciones.append({
                "Observaci√≥n General": "El Dato no guarda el estandar del Diccionario de Datos",
                "Observaci√≥n Espec√≠fica": "Capturar solo el a√±o de vigencia del insumo geogr√°fico",
                "Tipolog√≠a": "Fondo"
            })

        # 4. Num√©rico v√°lido de 4 d√≠gitos
        elif val.isdigit() and len(val) == 4:
            anio_val = int(val)
            if anio_val < 2000:
                observaciones.append({
                    "Observaci√≥n General": "Inconsistencia Logica del Dato",
                    "Observaci√≥n Espec√≠fica": "Revisar el a√±o de insumo geogr√°fico",
                    "Tipolog√≠a": "Fondo"
                })
            if anio_captura and anio_val > anio_captura:
                observaciones.append({
                    "Observaci√≥n General": "Inconsistencia Logica del Dato",
                    "Observaci√≥n Espec√≠fica": "Fecha del Insumo no debe ser superior a la fecha de captura",
                    "Tipolog√≠a": "Fondo"
                })

        # 5. Texto no v√°lido o valor num√©rico incorrecto
        else:
            observaciones.append({
                "Observaci√≥n General": "Inconsistencia Logica del Dato",
                "Observaci√≥n Espec√≠fica": "Capturar el a√±o de vigencia del Dato",
                "Tipolog√≠a": "Fondo"
            })

    # Registrar todas las observaciones
    for obs in observaciones:
        registros.append({
            "ID": id_val,
            "Columna Analizada": "A√±o Vigencia Insumo Geogr√°fico",
            "Dato Analizado": val_raw,  # mantengo el valor original
            "Anio_Captura": anio_captura,
            "Anio_Vigencia_Num": anio_vigencia,
            **obs
        })


    # ---- Nombre Vereda ----
    val_raw = df_raw.loc[idx, "Nombre Vereda"]
    val = fila["Nombre Vereda"]

    if pd.isna(val) or str(val).strip() == "":
        registros.append({
            "ID": id_val,
            "Columna Analizada": "Nombre Vereda",
            "Dato Analizado": "",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato sin diligenciar",
            "Tipolog√≠a": "Forma"
        })

    elif str(val).strip() == "" or str(val).upper() == "<ESPACIO>":
        registros.append({
            "ID": id_val,
            "Columna Analizada": "Nombre Vereda",
            "Dato Analizado": val_raw,
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato diligenciado √∫nicamente con espacio, Dato no es coherente con el Nombre Vereda",
            "Tipolog√≠a": "Forma"
        })

    elif isinstance(val_raw, str):
        val_str = str(val_raw).strip()
        observaciones_especificas = []

        # -----------------------------
        # 1. FMI / Seg√∫n Campo / Divipola / Documentos (prioridad)
        # -----------------------------
        if any(word.lower() in val_str.lower() for word in ["fmi", "seg√∫n campo", "campo","divipola", "documentos","igac","vur","registro"]):
            observaciones_especificas.append("Diligenciar solo el dato correspondiente a FMI")

        else:
            # -----------------------------
            # 2. Validaci√≥n Formato T√≠tulo con excepciones
            # -----------------------------
            palabras = val_str.split()
            excepciones_minuscula = ["de", "del", "y"]
            excepciones_mayuscula = ["la", "las", "los", "el"]
            errores_formato = []

            for i, p in enumerate(palabras):
                if p.lower() in excepciones_minuscula:
                    if i == 0:
                        # Primera palabra -> se permite que empiece en may√∫scula
                        continue
                    else:
                        if p != p.lower():
                            errores_formato.append("Errores en Formato")
                elif p.lower() in excepciones_mayuscula:
                    if not (p == p.lower() or p == p.capitalize()):
                        errores_formato.append("Errores en Formato")

            else:
                if p != p.capitalize():
                    "Errores en Formato"
                
            # -----------------------------
            # 3. Reglas adicionales
            # -----------------------------
            if re.search(r"\bvereda\b", val_str.lower()):
                observaciones_especificas.append("Solo capturar el nombre de vereda")

            if "no aplica" in val_str.lower():
                observaciones_especificas.append("Estandarizar a Sin Informaci√≥n")

            if re.search(r"\d+\s*(km|KM|m|M)\b", val_str):
                observaciones_especificas.append("Eliminar datos de metraje")

            if re.search(r"[,;.:]$", val_str) or re.search(r"[^a-zA-Z√Ä-√ø0-9\s,\-/]", val_str):
                observaciones_especificas.append("Eliminar caracteres especiales")
            
            if any(word in val_str.lower() for word in ["urbano", "zona urbana"]):
                observaciones_especificas.append("El dato debe diligenciarse como No Aplica si se sit√∫a en zona urbana")

            # -----------------------------
            # 4. Similaridades entre veredas (fuzzy matching)
            # -----------------------------
            valores_unicos = df_raw["Nombre Vereda"].dropna().unique()
            similares = process.extract(
                val_str,
                valores_unicos,
                scorer=fuzz.token_sort_ratio,
                limit=5
            )
            for match, score, _ in similares:
                if score >= 85 and match.lower() != val_str.lower():
                    observaciones_especificas.append("Estandarizar Nombre Vereda a un √∫nico registro")
                    break

        # -----------------------------
        # 5. Validaciones de Fondo (Inconsistencias L√≥gicas)
        # -----------------------------
        val_lower = val_str.lower()

        # 1. Caso Sin Informaci√≥n
        if val_lower in ["sin informaci√≥n", "sin informacion"]:
            registros.append({
                "ID": id_val,
                "Columna Analizada": "Nombre Vereda",
                "Dato Analizado": val_raw,
                "Observaci√≥n General": "Inconsistencia Logica del Dato",
                "Observaci√≥n Espec√≠fica": (
                    "Capturar Nombre de Vereda como primer insumo se deber√° capturar el del folio de matr√≠cula, "
                    "luego catastro y finalmente cruce espacial con la capa de veredas de DANE"
                ),
                "Tipolog√≠a": "Fondo"
            })

        else:
            # Palabras o expresiones que NO corresponden a nombre de vereda
            palabras_no_vereda = [
                "corregimiento", "inspecci√≥n", "lote", "sin zona", "sin definir", "por definir",
                "directriz ecopetrol", "√°rea de expansi√≥n", "cabecera municipal", "el 6",
                "zona especial", "cgto", "rural", "vereda con centro poblado", "zona fiscal",
                "casa lote", "casa lt"
            ]

            # Construir regex para buscar como palabra/frase completa
            patron_no_vereda = r"\b(" + "|".join(palabras_no_vereda) + r")\b"

            # Coincidencia con lista o valor puramente num√©rico
            if re.search(patron_no_vereda, val_lower) or re.fullmatch(r"\d+", val_str):
                registros.append({
                    "ID": id_val,
                    "Columna Analizada": "Nombre Vereda",
                    "Dato Analizado": val_raw,
                    "Observaci√≥n General": "Inconsistencia Logica del Dato",
                    "Observaci√≥n Espec√≠fica": "El dato no corresponde a Nombre de Vereda",
                    "Tipolog√≠a": "Fondo"
                })
        
        # -----------------------------
        # Registrar si hubo observaciones
        # -----------------------------
        if observaciones_especificas:
            registros.append({
                "ID": id_val,
                "Columna Analizada": "Nombre Vereda",
                "Dato Analizado": val_raw,
                "Observaci√≥n General": "El Dato no guarda el estandar del Diccionario de Datos",
                "Observaci√≥n Espec√≠fica": "; ".join(observaciones_especificas),
                "Tipolog√≠a": "Forma"
            })

    # ---- RULEID ----

    val_raw = df_raw.loc[idx, "RULEID"]
    val = fila["RULEID"]

    # üö® 1. Validaci√≥n de vac√≠os
    if pd.isna(val):  
        registros.append({
            "ID": id_val,
            "Columna Analizada": "RULEID",
            "Dato Analizado": "",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato sin diligenciar",
            "Tipolog√≠a": "Forma"
        })

    elif val == "<ESPACIO>":  
        registros.append({
            "ID": id_val,
            "Columna Analizada": "RULEID",
            "Dato Analizado": " ",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato diligenciado √∫nicamente con espacio, Dato no es coherente con el RULEID",
            "Tipolog√≠a": "Forma"
        })

    else:
        try:
            val_num = int(val) if str(val).strip() != "" else None

            # üö® 2. Validaci√≥n de dominio (solo se permite 1)
            if val_num != 1:
                registros.append({
                    "ID": id_val,
                    "Columna Analizada": "RULEID",
                    "Dato Analizado": str(val),
                    "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                    "Observaci√≥n Espec√≠fica": "Valor no hace parte del dominio, Diligenciar con valor 1",
                    "Tipolog√≠a": "Forma"
                })
            else:
                # üö® 3. Validaci√≥n de espacios SOLO si el valor es 1
                if isinstance(val_raw, str):
                    errores_espacios = []
                    if val_raw.startswith(" "):
                        errores_espacios.append("Espacio al inicio")
                    if val_raw.endswith(" "):
                        errores_espacios.append("Espacio al final")
                    if "  " in val_raw:
                        errores_espacios.append("M√∫ltiples espacios")
                    if "\n" in val_raw or "\r" in val_raw:
                        errores_espacios.append("Saltos de l√≠nea")

                    if errores_espacios:
                        registros.append({
                            "ID": id_val,
                            "Columna Analizada": "RULEID",
                            "Dato Analizado": val_raw,
                            "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                            "Observaci√≥n Espec√≠fica": "; ".join(errores_espacios),
                            "Tipolog√≠a": "Forma"
                        })

        except Exception:
            registros.append({
                "ID": id_val,
                "Columna Analizada": "RULEID",
                "Dato Analizado": str(val),
                "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                "Observaci√≥n Espec√≠fica": "Valor no num√©rico, Diligenciar con valor 1",
                "Tipolog√≠a": "Forma"
            })     

    # ---- C√≥digo SIG Predio Jur√≠dico ----

    val_raw = df_raw.loc[idx, "C√≥digo SIG Predio Jur√≠dico"]
    val = fila["C√≥digo SIG Predio Jur√≠dico"]

    observaciones = []  # lista de observaciones para este campo

    # üö® 1. Vac√≠os
    if pd.isna(val):
        observaciones.append({
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato sin diligenciar",
            "Tipolog√≠a": "Forma"
        })

    elif val == "<ESPACIO>":
        observaciones.append({
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato diligenciado √∫nicamente con espacio",
            "Tipolog√≠a": "Forma"
        })

    else:
        try:
            val_str = str(val).strip()
            val_up = val_str.upper()  # normaliza para prefijos
            estructura_valida = False  # bandera para validar espacios al final
            tiene_extras = any(c in val_str for c in ["_", "-"]) or not val_str.isalnum()

            # üö® 2. Unicidad (siempre acumula)
            if (df_raw["C√≥digo SIG Predio Jur√≠dico"] == val_str).sum() > 1:
                observaciones.append({
                    "Observaci√≥n General": "Inconsistencia L√≥gica del Dato",
                    "Observaci√≥n Espec√≠fica": "C√≥d. SIG se encuentra m√°s de una vez",
                    "Tipolog√≠a": "Fondo"
                })

            # üö® 3. Estructura (orden: CLC ‚Üí CO ‚Üí L ‚Üí SC ‚Üí C (catch-all) ‚Üí num√©rico ‚Üí else)
            if val_up.startswith("CLC"):
                # CLC0 + 4 d√≠gitos ‚Üí total 8
                if len(val_up) == 8 and val_up[3] == "0" and val_up[4:].isdigit() and not tiene_extras:
                    estructura_valida = True
                else:
                    observaciones.append({
                        "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                        "Observaci√≥n Espec√≠fica": "Estructura no cumple con el Diccionario de Datos" if tiene_extras
                                                else ("Valor no v√°lido" if not val_up[4:].isdigit()
                                                    else "Estandarizar de acuerdo al diccionario de Datos (CLC)"),
                        "Tipolog√≠a": "Forma"
                    })

            elif val_up.startswith("CO"):
                # CO + [31-36] + 5‚Äì6 d√≠gitos ‚Üí total 9 o 10
                if (len(val_up) in [9, 10] and val_up[2:4] in ["31","32","33","34","35","36"]
                    and val_up[4:].isdigit() and not tiene_extras):
                    estructura_valida = True
                else:
                    observaciones.append({
                        "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                        "Observaci√≥n Espec√≠fica": "Estructura no cumple con el Diccionario de Datos" if tiene_extras
                                                else ("Valor no v√°lido" if not val_up[4:].isdigit()
                                                    else "Estandarizar de acuerdo al diccionario de Datos (CO)"),
                        "Tipolog√≠a": "Forma"
                    })

            elif val_up.startswith("L"):
                # ‚úÖ V√°lido: L0 + 4 d√≠gitos (largo 6) y sin separadores
                if val_up.startswith("L0") and len(val_up) == 6 and val_up[2:].isdigit() and val_str.isalnum():
                    estructura_valida = True
                else:
                    # 1) Tiene L0 pero despu√©s aparece cualquier no-d√≠gito (letras, separadores, etc.) ‚Üí Estructura no cumple
                    if val_up.startswith("L0") and (not val_up[2:].isdigit() or not val_str.isalnum()):
                        observaciones.append({
                            "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                            "Observaci√≥n Espec√≠fica": "Estructura no cumple con el Diccionario de Datos",
                            "Tipolog√≠a": "Forma"
                        })
                    # 2) Tiene L0 y solo d√≠gitos, pero el largo no es 6 (faltan/sobran) ‚Üí Estandarizar (L)
                    elif val_up.startswith("L0") and val_up[2:].isdigit() and len(val_up) != 6:
                        observaciones.append({
                            "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                            "Observaci√≥n Espec√≠fica": "Estandarizar de acuerdo al diccionario de Datos (L)",
                            "Tipolog√≠a": "Forma"
                        })
                    # 3) No cumple el prefijo L0 (p.ej., LADESPENSA, L12345) ‚Üí Valor no v√°lido
                    else:
                        observaciones.append({
                            "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                            "Observaci√≥n Espec√≠fica": "Valor no v√°lido",
                            "Tipolog√≠a": "Forma"
                        })

            elif val_up.startswith("SC"):
                # SC0 + 4 d√≠gitos ‚Üí total 7
                if len(val_up) == 7 and val_up[2] == "0" and val_up[3:].isdigit() and not tiene_extras:
                    estructura_valida = True
                else:
                    observaciones.append({
                        "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                        "Observaci√≥n Espec√≠fica": "Estructura no cumple con el Diccionario de Datos" if tiene_extras
                                                else ("Valor no v√°lido" if not val_up[3:].isdigit()
                                                    else "Estandarizar de acuerdo al diccionario de Datos (SC)"),
                        "Tipolog√≠a": "Forma"
                    })

            elif val_up.startswith("C"):
                # ‚ö†Ô∏è Catch-all: cualquier 'C...' que no sea CLC ni CO ‚Üí estandarizar como CO
                observaciones.append({
                    "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                    "Observaci√≥n Espec√≠fica": "Estandarizar de acuerdo al diccionario de Datos (CO)",
                    "Tipolog√≠a": "Forma"
                })

            elif val_up[0].isdigit():
                # Num√©rico puro entre 4 y 10 d√≠gitos
                if val_up.isdigit() and 4 <= len(val_up) <= 10 and not tiene_extras:
                    estructura_valida = True
                else:
                    observaciones.append({
                        "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos" if tiene_extras
                                            else "Inconsistencia L√≥gica del Dato",
                        "Observaci√≥n Espec√≠fica": "Estructura no cumple con el Diccionario de Datos" if tiene_extras
                                                else "Revisar la consistencia del C√≥d. SIG",
                        "Tipolog√≠a": "Forma" if tiene_extras else "Fondo"
                    })

            else:
                observaciones.append({
                    "Observaci√≥n General": "Inconsistencia L√≥gica del Dato",
                    "Observaci√≥n Espec√≠fica": "Revisar la consistencia del C√≥d. SIG",
                    "Tipolog√≠a": "Fondo"
                })

            # üö® 4. Espacios problem√°ticos SOLO si la estructura es v√°lida
            if estructura_valida and isinstance(val_raw, str):
                errores_espacios = []
                if val_raw.startswith(" "): errores_espacios.append("Espacio al inicio")
                if val_raw.endswith(" "):   errores_espacios.append("Espacio al final")
                if "  " in val_raw:         errores_espacios.append("M√∫ltiples espacios")
                if "\n" in val_raw or "\r" in val_raw: errores_espacios.append("Saltos de l√≠nea")

                if errores_espacios:
                    observaciones.append({
                        "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                        "Observaci√≥n Espec√≠fica": "; ".join(errores_espacios),
                        "Tipolog√≠a": "Forma"
                    })

        except Exception:
            observaciones.append({
                "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                "Observaci√≥n Espec√≠fica": "Revisar la consistencia del C√≥d. SIG",
                "Tipolog√≠a": "Forma"
            })

    # üö® Registrar todas las observaciones acumuladas
    for obs in observaciones:
        registros.append({
            "ID": id_val,
            "Columna Analizada": "C√≥digo SIG Predio Jur√≠dico",
            "Dato Analizado": str(val) if not pd.isna(val) else "",
            **obs
        })

    # ---- √Årea Terreno Calculada Mts2 ----

    val_raw = df_raw.loc[idx, "√Årea Terreno Calculada Mts2"]
    val = fila["√Årea Terreno Calculada Mts2"]
    
    if pd.isna(val): # Vacio
        registros.append({
            "ID": id_val,
            "Columna Analizada": "√Årea Terreno Calculada Mts2",
            "Dato Analizado": "",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato sin diligenciar",
            "Tipolog√≠a": "Forma"
        })

    elif val == "<ESPACIO>":  # solo espacios
        registros.append({
            "ID": id_val,
            "Columna Analizada": "√Årea Terreno Calculada Mts2",
            "Dato Analizado": " ",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato diligenciado √∫nicamente con espacio, Dato no es coherente con el √Årea Terreno Calculada Mts2",
            "Tipolog√≠a": "Forma"
        })
    
    elif isinstance(val_raw, str):  # üö® Validaci√≥n de espacios problem√°ticos
        errores_espacios = []
        if val_raw.startswith(" "):
            errores_espacios.append("Espacio al inicio")
        if val_raw.endswith(" "):
            errores_espacios.append("Espacio al final")
        if "  " in val_raw:
            errores_espacios.append("M√∫ltiples espacios")
        if "\n" in val_raw or "\r" in val_raw:
            errores_espacios.append("Saltos de l√≠nea")
    
        if errores_espacios:
            registros.append({
                "ID": id_val,
                "Columna Analizada": "√Årea Terreno Calculada Mts2",
                "Dato Analizado": val_raw,
                "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                "Observaci√≥n Espec√≠fica": "; ".join(errores_espacios),
                "Tipolog√≠a": "Forma"
        })
                             
    # ---- Tipo de Propiedad ----

    val_raw = df_raw.loc[idx, "Tipo de Propiedad"]
    val = fila["Tipo de Propiedad"]

    if pd.isna(val):  # üö® Vac√≠o
        registros.append({
            "ID": id_val,
            "Columna Analizada": "Tipo de Propiedad",
            "Dato Analizado": "",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato sin diligenciar",
            "Tipolog√≠a": "Forma"
        })

    elif val == "<ESPACIO>":  # üö® Solo espacios
        registros.append({
            "ID": id_val,
            "Columna Analizada": "Tipo de Propiedad",
            "Dato Analizado": " ",
            "Observaci√≥n General": "Inconsistencia Totalidad del Dato",
            "Observaci√≥n Espec√≠fica": "Dato diligenciado √∫nicamente con espacio, Dato no es coherente con el Tipo de Propiedad",
            "Tipolog√≠a": "Forma"
        })

    elif isinstance(val_raw, str):  
        val_str = val_raw.strip()

        # üö® Validaci√≥n de espacios problem√°ticos
        errores_espacios = []
        if val_raw.startswith(" "):
            errores_espacios.append("Espacio al inicio")
        if val_raw.endswith(" "):
            errores_espacios.append("Espacio al final")
        if "  " in val_raw:
            errores_espacios.append("M√∫ltiples espacios")
        if "\n" in val_raw or "\r" in val_raw:
            errores_espacios.append("Saltos de l√≠nea")

        if errores_espacios:
            registros.append({
                "ID": id_val,
                "Columna Analizada": "Tipo de Propiedad",
                "Dato Analizado": val_raw,
                "Observaci√≥n General": "El Dato no guarda el est√°ndar del Diccionario de Datos",
                "Observaci√≥n Espec√≠fica": "; ".join(errores_espacios),
                "Tipolog√≠a": "Forma"
            })

        # üö® Validaci√≥n de dominios permitidos
        dominios_permitidos = ["PRESUNTAMENTE BALDIO", "PRIVADA", "SIN INFORMACION"]
        if val_str.upper() not in dominios_permitidos:
            registros.append({
                "ID": id_val,
                "Columna Analizada": "Tipo de Propiedad",
                "Dato Analizado": val_str,
                "Observaci√≥n General": "Inconsistencia L√≥gica del Dato",
                "Observaci√≥n Espec√≠fica": "Dominio no se encuentra de acuerdo con el Diccionario de Datos",
                "Tipolog√≠a": "Fondo"
            })
             
# ==========================
# Convertir a DataFrame
# ==========================
reporte = pd.DataFrame(registros)

# A√±adir la columna Obs_Nom_Proyect desde df (donde la fuimos guardando en cada fila)
df_merge = df.merge(
    reporte,
    on="ID",
    how="left",
    suffixes=("", "_obs")
)
# ==========================
# Funci√≥n para limpiar caracteres ilegales de Excel
# ==========================
def limpiar_excel(value):
    if isinstance(value, str):
        # Quita caracteres de control ASCII 0‚Äì31 y 127
        return re.sub(r'[\x00-\x1F\x7F]', '', value)
    return value

# ==========================
# Guardar en Excel con hojas separadas
# ==========================
if not reporte.empty:
    with pd.ExcelWriter("Inconsistencias_EditedPlot.xlsx", engine="openpyxl") as writer:
        for columna in columnas_objetivo:
            if columna == "ID":
                continue  # no validamos ID directamente
            df_columna = reporte[reporte["Columna Analizada"] == columna]
            if not df_columna.empty:
                nombre_hoja = columna[:31]  # Excel permite m√°x 31 caracteres
                df_columna = df_columna.applymap(limpiar_excel)    
                df_columna.to_excel(writer, sheet_name=nombre_hoja, index=False)
    print("‚úÖ Reporte generado: 'Inconsistencias_EditedPlot.xlsx'")
    print(f"üìä Total inconsistencias encontradas: {len(reporte)}")
else:
    print("‚úÖ No se encontraron campos inconsistentes en las columnas seleccionadas.")
input("\nPresiona ENTER para salir...")
